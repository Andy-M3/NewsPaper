python manage.py makemigrations
python  manage.py migrate
py manage.py shell
from news.models import *


Что вы должны сделать в консоли django?
1. Создать двух пользователей (с помощью метода User.objects.create_user('username'))

u1 = User.objects.create_user(username='katya') создание пользователя u1
u2 = User.objects.create_user(username='Andrey') создание пользователя u2

2. Создать два объекта модели Author, связанные с пользователями.

Author.objects.create(authorUser=u1)
Author.objects.create(authorUser=u2)

3. Добавить 4 категории в модель Category.

Category.objects.create(name='Information Technology')
Category.objects.create(name='Sport')
Category.objects.create(name='Auto')
Category.objects.create(name='Cinema')

4 Добавить 2 статьи и 1 новость
присваиваем автору переменную author и author1
author = Author.objects.get(id=1)
author1 = Author.objects.get(id=2)

Добавляем новость:
Post.objects.create(author=author, categoryType='NW', title = 'Первая новость', text='Текст первой новости')

Добавляем статьи:
Post.objects.create(author=author, categoryType='AR', title = 'Первая статья', text='Текст первой статьи')
Post.objects.create(author=author1, categoryType='AR', title = 'Вторая статья', text='Текст второй статьи')

5 Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий)

Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1), Category.objects.get(id=4))
Post.objects.get(id=2).postCategory.add(Category.objects.get(id=3))

6. Создать как минимум 4 комментария к разным объектам модели Post
(в каждом объекте должен быть как минимум один комментарий).

Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='комментарий к первой новости от юзера 1')
Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=1).authorUser, text='комментарий к первой статье от юзера 1')
Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=2).authorUser, text='комментарий к первой статье от юзера 2')
Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text='комментарий ко второй статье от юзера 2')

7. Применяя функции like() и dislike() к статьям/новостям и комментариям,
скорректировать рейтинги этих объектов.

Post.objects.get(id=1).like()
Post.objects.get(id=2).dislike()
Post.objects.get(id=3).like()
Post.objects.get(id=3).like()

8. Обновить рейтинги пользователей.
Author.objects.get(id=1).update_rating()
Author.objects.get(id=2).update_rating()


9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

for i in a:
...	i.ratingAuthor
...	i.authorUser.username

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи,
основываясь на лайках/дислайках к этой статье.

a = Post.objects.all().order_by('-rating').values('rating', 'dateCreation', 'author', 'title')[0]
a

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

a = Comment.objects.all().values( 'dateCreation', 'commentUser', 'rating', 'text')[0]      
a
